# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet C_ "Easy cmake setup for a C project" A
#C Project
cmake_minimum_required(VERSION ${1:3.10.2})

#Set debug mode
set(CMAKE_BUILD_TYPE Debug)

#Export compile commands json file, this is needed for clangd coc.nvim autocomplete
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#Set variable to use for project name and main file
set(ProjectBasename "${2:ProjectName}")
set(MainSource "\$\{ProjectBasename\}.c")

#Set project name and specify C compiler
project(\$\{ProjectBasename\} C)

#Set executable
add_executable(\$\{ProjectBasename\} \$\{MainSource\})
endsnippet

snippet Ctdd_ "Setup C static library and Ctest testing program" A
#C Project
cmake_minimum_required(VERSION ${1:3.10.2})

#Set debug mode
set(CMAKE_BUILD_TYPE Debug)

#Export compile commands json file, this is needed for clangd coc.nvim autocomplete
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#Set variable to use for project name and main file
set(ProjectBasename "${2:ProjectName}")

#Set project name, description, and language
project(\$\{ProjectBasename\}
    LANGUAGES C
    DESCRIPTION "${3:Test app}"
    )

#Set static library
add_library(\$\{ProjectBasename\} STATIC
    \$\{ProjectBasename\}.c
    \$\{ProjectBasename\}.h
    )

# Enable Cmake built-in unit testing, needs to be declared once for entire project
include(CTest)

# Add test application
add_executable(\$\{ProjectBasename\}_test
    \$\{ProjectBasename\}_test.c
    )

# Link the static library to the test application
target_link_libraries(\$\{ProjectBasename\}_test \$\{ProjectBasename\})

#Use the newest C standard (C11)
set_property(TARGET \$\{ProjectBasename\}      PROPERTY C_STANDARD 11)
set_property(TARGET \$\{ProjectBasename\}_test PROPERTY C_STANDARD 11)

# Tests can pass or fail in two ways:
# 1. Default method is to check the return code.
#
#    Return value of:             0 == pass
#    Return value of: anything else == fail
#
# 2. You can read the output and filter with a regular expression. Note that
#    stderr and stdout will all be checked, not just stdout.
#
#    PASS_REGULAR_EXPRESSION: if output matches, the test will pass
#    FAIL_REGULAR_EXPRESSION: if output matches, the test will fail
#
#  ____  _                 _     _   ____
# / ___|| |__   ___  _   _| | __| | |  _ \ __ _ ___ ___
# \___ \| '_ \ / _ \| | | | |/ _\` | | |_) / _\` / __/ __|
#  ___) | | | | (_) | |_| | | (_| | |  __/ (_| \__ \__ \
# |____/|_| |_|\___/ \__,_|_|\__,_| |_|   \__,_|___/___/
#--------------------------------
add_test(${4:Test1}_ShouldPass \$\{ProjectBasename\}_test "${5:input}")

# Tests that are supposed to fail (return value != 0)
#  ____  _                 _     _   _____     _ _
# / ___|| |__   ___  _   _| | __| | |  ___|_ _(_) |
# \___ \| '_ \ / _ \| | | | |/ _\` | | |_ / _\` | | |
#  ___) | | | | (_) | |_| | | (_| | |  _| (_| | | |
# |____/|_| |_|\___/ \__,_|_|\__,_| |_|  \__,_|_|_|
#--------------------------------
add_test(${4}_ShouldFail \$\{ProjectBasename\}_test "${6:input}")
endsnippet

snippet Cpp_ "Easy cmake setup for a C++ project" A
#C++ Project
cmake_minimum_required(VERSION ${1:3.10.2})

#Set debug mode
set(CMAKE_BUILD_TYPE Debug)

#Export compile commands json file, this is needed for clangd coc.nvim autocomplete
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#Set variable to use for project name and main file
set(ProjectBasename "${2:ProjectName}")
set(MainSource "\$\{ProjectBasename\}.cpp")

#Set project name, C++ is assumed
project(\$\{ProjectBasename\})

#Set executable
add_executable(\$\{ProjectBasename\} \$\{MainSource\})
endsnippet
